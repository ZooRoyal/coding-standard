#!/usr/bin/env php
<?php

$autoloadFiles = array(__DIR__ . '/../../vendor/autoload.php',
                       __DIR__ . '/../../../../autoload.php');

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
    }
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Zooroyal\CodingStandard\CommandLine\Commands\FindFilesToCheckCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\JSESLintCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\JSStyleLintCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\PHPCodeSnifferCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\PHPCopyPasteDetectorCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\PHPMessDetectorCommand;
use Zooroyal\CodingStandard\CommandLine\Commands\PHPParallelLintCommand;
use Zooroyal\CodingStandard\CommandLine\Factories\ContainerFactory;

$container = ContainerFactory::getContainerInstance();

$phpCodeSnifferCommand   = $container->get(PHPCodeSnifferCommand::class);
$findFilesToCheckCommand = $container->get(FindFilesToCheckCommand::class);
$messDetectCommand       = $container->get(PHPMessDetectorCommand::class);
$parallelLint            = $container->get(PHPParallelLintCommand::class);
$copyPasteDetector       = $container->get(PHPCopyPasteDetectorCommand::class);
$esLint                  = $container->get(JSESLintCommand::class);
$styleLint               = $container->get(JSStyleLintCommand::class);

$application = new Application();

// ... register commands
$application->add($phpCodeSnifferCommand);
$application->add($findFilesToCheckCommand);
$application->add($messDetectCommand);
$application->add($parallelLint);
$application->add($copyPasteDetector);
$application->add($esLint);
$application->add($styleLint);

$container->call([$application, 'run'],
    [$container->get(InputInterface::class), $container->get(OutputInterface::class)]);
